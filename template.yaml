# CEDA Backstage GitHub Public Python Library Template
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template

# Basic Template Information
metadata:
  name: ceda-github-python-library
  title: CEDA GitHub Python Library
  description: Create a Python library or client in the CEDADEV organisation

# Templated Information
spec:
  owner: group:default/developers
  type: library
  parameters:
    - title: Basic Library Information
      required:
        - name
        - slug
        - description
        - visibility
      properties:
        name:
          title: Software name
          type: string
          description: The name of the component in this software catalogue (i.e. "CEDA ServiceX Client).
          ui:autofocus: true
          ui:options:
            rows: 1
        slug:
          title: Repository Slug (Name)
          type: string
          description: The slug for the repository, (i.e. "ceda-servicex-client")
          ui:options:
            rows: 1
          pattern: "^[a-z0-9]+(?:-[a-z0-9]+)*$"
        description:
          title: Description
          type: string
          description: A brief description of the library.
          ui:options:
            rows: 5
        visibility:
          title: Visibility
          type: string
          description: The visibility of the repository
          default: public
          enum:
            - public
            - private
          enumNames:
            - Public (default)
            - Private (visible only to CEDADEV organisational members on github)
    - title: Software Quality Measures
      required:
        - testCoverage
        - mccabeCodeQualityAverage
        - mccabeCodeQualityModule
        - mccabeCodeQualityBlock
        - banditSkips
        - dependencySkips
      properties:
        testCoverage:
          title: Test Coverage
          description: Uses the slider to define the minimum level of test coverage. The CI pipeline will fail if your code does not reach this level.
          type: integer
          minimum: 0
          maximum: 100
          multipleOf: 5
          default: 100
          ui:widget: range

        mccabeCodeQualityAverage:
          title: McCabe Code Quality (minimum average for entire project)
          description: Set the minimum cyclomatic complexity score you consider valid for your entire codebase. A-C are considered to be "good, readable code".
          type: string
          enum: [ A, B, C, D, E, F ]
          default: A

        mccabeCodeQualityModule:
          title: McCabe Code Quality (minimum value for any given file)
          description: Set the minimum cyclomatic complexity score you consider valid for any given file in your codebase. A-C are considered to be "good, readable code".
          type: string
          enum: [ A, B, C, D, E, F ]
          default: A

        mccabeCodeQualityBlock:
          title: McCabe Code Quality (minimum value for any given block of code)
          description: Set the minimum cyclomatic complexity score you consider valid for any given block (function, method, class, etc.). A-C are considered to be "good, readable code".
          type: string
          enum: [ A, B, C, D, E, F ]
          default: B

        banditSkips:
          title: Allowable Bandit Exemption Rules
          type: array
          description: Add any Bandit security check codes which may not be valid for your project (i.e. "B703" and "B308" are common false positives in Django applications)
          items: {
            title: "Add error code to disable a Bandit check:",
            type: string,
          }

        dependencySkips:
          title: Allowable CVE Vulnerabilities
          type: array
          description: Add any CVE vulnerabilities that you know are false positives (for example, "CVE-2019-8341" is a known vulnerability in Jinja2 that CANNOT occur outside of web application frameworks)
          items: {
            title: "Add CVE codes to prevent that vulnerability stopping deployment",
            type: string,
            pattern: "CVE-\d{4}-\d{4,7}",
          }

  # Steps undertaken by backstage after completion of the template form
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./github_content
        targetPath: ./ghub
        values:
          name: ${{ parameters.name }}
          author: ${{ user.entity }}
          description: ${{ parameters.description }}
          slug: ${{ parameters.slug }}
          testCoverage: ${{ parameters.testCoverage }}
          mccabeCodeQualityAverage: ${{ parameters.mccabeCodeQualityAverage }}
          mccabeCodeQualityBlock: ${{ parameters.mccabeCodeQualityBlock }}
          mccabeCodeQualityModule: ${{ parameters.mccabeCodeQualityModule }}
          banditSkips: ${{ parameters.banditSkips }}
          dependencySkips: ${{ parameters.dependencySkips }}

    - id: publish
      name: Publish
      action: publish:github
      input:
        sourcePath: ./ghub
        gitAuthorName: ${{ user.entity.metadata.name }}
        gitAuthorEmail: ${{ user.entity.spec.profile.email }}
        allowedHosts:
          - github.com
        description: ${{ parameters.description }}
        repoUrl: github.com?owner=cedadev&repo=${{ parameters.slug }}
        repoVisibility: ${{ parameters.visibility }}
        defaultBranch: main

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # some outputs which are saved along with the job for use in the frontend
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
